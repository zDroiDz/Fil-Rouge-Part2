package vueGraphique;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.LayoutStyle.ComponentPlacement;

import control.ControlCreerProfil;
import control.ControlSIdentifier;
import model.Profil;

import javax.swing.JLabel;
import java.awt.Color;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;

public class PanSIdentifier extends JPanel {
	
	ControlSIdentifier controlSIdentifier = new ControlSIdentifier();
	ControlCreerProfil controlCreerProfil = new ControlCreerProfil();
	
	private JTextField login = new JTextField();
	private JPasswordField password = new JPasswordField() ;

	/**
	 * Create the panel.
	 */
	private Profil profil = null ;
	private Font policeTitre=new Font( "Calibri", Font.BOLD,36);
	 
	private JTextField prenom = new JTextField() ;
	private JTextField nom = new JTextField();
	private JPasswordField mdp = new JPasswordField();
	private JPasswordField confMdp = new JPasswordField();
	private JLabel lblNewLabel_1;
	private JButton buttonOk = new JButton("Ok"); ;
	private JButton creerCompte = new JButton("Creer un compte");
	private JLabel lblIdentifiantOuMot = new JLabel("Identifiant ou mot de passe incorrect !");
	KeyListener keyListener ;
	
	
	/**
	 * 
	 */
	public PanSIdentifier() {
		setLayout(null);
		
		
		lblIdentifiantOuMot.setBounds(252, 136, 272, 15);
		lblIdentifiantOuMot.setForeground(Color.RED);
		lblIdentifiantOuMot.setVisible(false);
		add(lblIdentifiantOuMot);
		
		
		lblNewLabel_1 = new JLabel("Welcome to Brick'nSoft");
		lblNewLabel_1.setBounds(299, 31, 163, 15);
		add(lblNewLabel_1);
		
				
		JLabel lblLogin = new JLabel("Identifiant");
		lblLogin.setBounds(189, 78, 126, 15);
		add(lblLogin);
		login.setBounds(189, 105, 151, 19);
		
		
		login.setColumns(10);
		add(login);
		
		JLabel lblPassword = new JLabel("Mot de passe");
		lblPassword.setBounds(420, 78, 130, 15);
		add(lblPassword);
		password.setBounds(420, 105, 151, 19);
		
	
		password.setColumns(10);
		add(password);
		buttonOk.setBounds(624, 102, 53, 25);
		add(buttonOk);
		
		
		
				
				this.buttonOk.addActionListener(new ActionListener() {
		
					@Override
					public void actionPerformed(ActionEvent e) {
						// TODO Auto-generated method stub
						if(FrameClient.profil == null) {
							lblIdentifiantOuMot.setVisible(true);
						}
					}
					
				});
		
	
		
		JLabel lblNewLabel = new JLabel("Creer un compte ?");
		lblNewLabel.setBounds(204, 187, 783, 43);
		lblNewLabel.setFont(policeTitre);
		lblNewLabel.setFont(policeTitre);
		add(lblNewLabel);
		prenom.setBounds(387, 290, 151, 19);
		
		
		prenom.setColumns(10);
		add(prenom);
		
		nom.setBounds(214, 290, 151, 19);
		nom.setColumns(10);
		add(nom);
		
		JLabel labelVerifMdp = new JLabel("Les champs doivent etre identique ! ");
		labelVerifMdp.setBounds(552, 395, 287, 54);
		labelVerifMdp.setForeground(Color.RED);
		labelVerifMdp.setVisible(false);
		add(labelVerifMdp);
		mdp.setBounds(214, 353, 324, 19);
		
		
		mdp.setColumns(10);
		add(mdp);
		confMdp.setBounds(214, 413, 324, 19);
		

		confMdp.setColumns(10);
		add(confMdp);
		creerCompte.setBounds(296, 444, 151, 25);
		add(creerCompte);
		
		JLabel labelPrenomCreation = new JLabel("Prenom");
		labelPrenomCreation.setBounds(214, 262, 70, 15);
		add(labelPrenomCreation);
		
		JLabel labelNomCreation = new JLabel("Nom");
		labelNomCreation.setBounds(387, 262, 70, 15);
		add(labelNomCreation);
		
		JLabel lblMotDePasseCreation = new JLabel("Mot de passe");
		lblMotDePasseCreation.setBounds(214, 326, 114, 15);
		add(lblMotDePasseCreation);
		
		JLabel lblConfirmationMotDe = new JLabel("Confirmation mot de passe");
		lblConfirmationMotDe.setBounds(214, 386, 233, 15);
		add(lblConfirmationMotDe);
		
		JLabel lblVousNePouvez = new JLabel("Vous ne pouvez pas utiliser ce mot de passe !");
		lblVousNePouvez.setForeground(Color.RED);
		lblVousNePouvez.setBounds(515, 326, 363, 15);
		lblVousNePouvez.setVisible(false);
		add(lblVousNePouvez);
		
		
		this.creerCompte.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(!mdp.getText().equals(confMdp.getText())) {
					labelVerifMdp.setVisible(true);
				}else {
					labelVerifMdp.setVisible(false);
				}
				
				if(!controlCreerProfil.verificationCreation(mdp.getText())) {
					lblVousNePouvez.setVisible(true);
				}else {
					lblVousNePouvez.setVisible(false);
				}
			}
			
		});
		
		
		keyListener = new KeyListener() {
			
			@Override
			public void keyTyped(KeyEvent e) {
				// TODO Auto-generated method stub
				creerCompte.setEnabled(true);
				
			}
			
			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub
				
				String prenom1=prenom.getText();
				String nom1=nom.getText();
				String mdp1=mdp.getText();
				String confmdp1=confMdp.getText();
				
				for(int i = 0 ; i < prenom1.length() ; i++) {
					if(!verifyValide(contenuNbOccTxt.charAt(i)) ) {
						valide  = false ;
					}
				}
				
				for(int i = 0 ; i < contenuNbBitsCouleur.length() ; i++) {
					if(!verifyValide(contenuNbBitsCouleur.charAt(i)) ) {
						valide  = false ;
					}
				}
				for(int i = 0 ; i < contenuNbBitsCouleur.length() ; i++) {
					if(!verifyValide(contenuNbBitsCouleur.charAt(i)) ) {
						valide  = false ;
					}
				}
				for(int i = 0 ; i < contenuNbBitsCouleur.length() ; i++) {
					if(!verifyValide(contenuNbBitsCouleur.charAt(i)) ) {
						valide  = false ;
					}
				}
				
				if(!valide || contenuNbOccTxt.length()==0 || contenuNbEchSon.length()==0 || contenuInterSon.length()==0 ||contenuNbBitsNB.length()==0 ||contenuNbBitsCouleur.length()==0 ) {
					boxVerificationValidite.setVisible(true);
					buttonConfigurer.setEnabled(false);
				}
				else
				{
					buttonConfigurer.setEnabled(true);
				}
				
			}
		};
		
		
		prenom.addKeyListener(keyListener);
		nom.addKeyListener(keyListener);
		mdp.addKeyListener(keyListener);
		confMdp.addKeyListener(keyListener);
		
		
	}
	
	
	
	public JButton getBoutonOk() {
		return this.buttonOk ;
	}
	
	public JButton getBoutonCreerCompte() {
		return this.creerCompte ;
	}
	
	public String getLogin() {
		return this.login.getText() ;
	}
	
	public String getPasswordConnection() {
		return this.password.getText();
	}
	
	public Profil getProfil() {
		return this.profil;
	}
	public String getPrenom() {
		return prenom.getText();
	}

	public String getNom() {
		return nom.getText();
	}
	
	public String getPasswordCreation() {
	  return this.mdp.getText();
	}
	
	public String getConfPasswordCreation() {
		return this.confMdp.getText();
	}
	
	public boolean verifyValide(char car)
	{
		String specialChars = "[`~!@#$%^&*()_+[\\]\\\\;\',./{}|:\"<>?] abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		
		for(int i=0;i<specialChars.length();i++)
		{
			if(car==specialChars.charAt(i))
			{
				return false;
			}
		}
		return true;
	}
}
